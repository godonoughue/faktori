{"changed":true,"filter":false,"title":"app.js","tooltip":"/app.js","value":"var express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar bodyParser = require('body-parser');\nvar cookieParser = require('cookie-parser');\nvar hbs = require('hbs');\nvar i18n = require('i18n');\n\nvar routes = require('./routes/index');\nvar users = require('./routes/users');\n\nvar app = express();\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(__dirname + '/public/favicon.ico'));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(require('stylus').middleware(path.join(__dirname, 'public')));\napp.use(express.static(path.join(__dirname, 'public')));\n\ni18n.configure({\n    // setup some locales - other locales default to en silently\n    locales: ['en', 'fr'],\n\n    // you may alter a site wide default locale\n    defaultLocale: 'en',\n    \n    // sets a custom cookie name to parse locale settings from\n    cookie: 'locale',\n    \n    // where to store json files\n    directory: path.join(__dirname, \"config/locales\")\n});\n\n// init i18n module for this loop\napp.use(i18n.init);\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'hbs');\n\nhbs.registerPartials(path.join(__dirname, 'views/partials'));\n \n// register hbs helpers in res.locals' context which provides this.locale\nhbs.registerHelper('__', function () {\n    return i18n.__.apply(this, arguments);\n});\n\nhbs.registerHelper('__n', function () {\n    return i18n.__n.apply(this, arguments);\n});\n\nhbs.registerHelper('active', function(pid) {\n    if (pid === this.pid) {\n        return ' class=active';   \n    }\n});\n\napp.use(function(req, res, next) {\n    res.locals.brand = \"Faktori\";\n    \n    var lang = req.query.lang || req.getLocale();\n    res.setLocale(lang);\n    req.setLocale(lang);\n    i18n.setLocale(lang);\n    res.locals.lang = lang.toUpperCase();\n\n    res.locals.backUrl = req.header('Referer') || '/';\n    res.locals.url = req.path;\n    if (req.path === '/') {\n        res.locals.pid = 'home';\n    }\n    else {\n        res.locals.pid = req.originalUrl.substring(1);\n    }\n    next();\n});\n\napp.use('/', routes);\napp.use('/users', users);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n    app.use(function(err, req, res, next) {\n        res.status(err.status || 500);\n        res.render('error', {\n            message: err.message,\n            error: err\n        });\n    });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    res.render('error', {\n        message: err.message,\n        error: {}\n    });\n});\n\nmodule.exports = app;","undoManager":{"mark":-1,"position":1,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":22,"column":0},"end":{"row":23,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":22,"column":0},"end":{"row":23,"column":0}},"nl":"\n","lines":[""]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":22,"column":0},"end":{"row":22,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1413977150000}